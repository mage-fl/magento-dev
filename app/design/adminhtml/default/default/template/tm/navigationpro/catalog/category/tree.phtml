<div class="categories-side-col">
    <div class="content-header">
        <h3 class="icon-head head-categories"><?php echo Mage::helper('navigationpro')->__('Navigation') ?></h3>
        <?php echo $this->getAddMenuButtonHtml() ?>
    </div>
    <?php echo $this->getStoreSwitcherHtml();?>
    <div class="tree-actions">
        <?php if($this->getRoot()): ?>
            <a href="#" onclick="tree.collapseTree(); return false;"><?php echo Mage::helper('catalog')->__('Collapse All'); ?></a> <span class="separator">|</span> <a href="#" onclick="tree.expandTree(); return false;"><?php echo Mage::helper('catalog')->__('Expand All'); ?></a>
        <?php endif; ?>
    </div>
    <?php if ($this->getRoot()): ?>
    <div class="tree-holder">
        <div id="tree-div" style="width:100%; overflow:auto;"></div>
    </div>
</div>
<script type="text/javascript">
//<![CDATA[
var tree;

/**
 * Fix ext compatibility with prototype 1.6
 */
Ext.lib.Event.getTarget = function(e) {
    var ee = e.browserEvent || e;
    return ee.target ? Event.element(ee) : null;
};

Ext.tree.TreePanel.Enhanced = function(el, config)
{
    Ext.tree.TreePanel.Enhanced.superclass.constructor.call(this, el, config);
};

Ext.extend(Ext.tree.TreePanel.Enhanced, Ext.tree.TreePanel, {

    loadTree : function(config, firstLoad)
    {
        var parameters = config['parameters'];
        var data = config['data'];

        this.storeId = parameters['store_id'];

        if ((typeof parameters['root_visible']) != 'undefined') {
            this.rootVisible = parameters['root_visible']*1;
        }

        var root = new Ext.tree.TreeNode(parameters);

        this.nodeHash = {};
        this.setRootNode(root);

        if (firstLoad) {
            this.addListener('click', this.categoryClick);
            // this.addListener('beforenodedrop', categoryMove.createDelegate(this));
        }

        this.loader.buildCategoryTree(root, data);
        this.el.dom.innerHTML = '';
        // render the tree
        this.render();
        if (parameters['expanded']) {
            this.expandAll();
        } else {
            root.expand();
        }

        var selectedNode = null;
        if (parameters['path']) {
            this.selectPath(parameters['path']);
            selectedNode = tree.getSelectionModel().getSelectedNode();
            this.currentNodePath = config.parameters.path;
        }
        if (selectedNode) {
            this.currentNodeId = selectedNode.id;
        }
        this.selectCurrentNode();
    },

    request : function(url, params)
    {
        if (!params) {
            if (menu_info_tabsJsTabs.activeTab) {
                var params = {active_tab_id:menu_info_tabsJsTabs.activeTab.id};
            } else {
                var params = {};
            }
        }
        if (!params.form_key) {
            params.form_key = FORM_KEY;
        }
        var result = new Ajax.Request(
            url + (url.match(new RegExp('\\?')) ? '&isAjax=true' : '?isAjax=true' ),
            {
               parameters:  params,
               method:      'post'
            }
        );

        return result;
    },

    selectCurrentNode : function()
    {
        if (this.currentNodePath) {
            var path = this.currentNodePath;
            if (!this.storeId) {
                path = '0/'+path;
            }
            this.selectPath(path);
        }
    },

    collapseTree : function()
    {
        this.collapseAll();

        this.selectCurrentNode();

        if (!this.collapsed) {
            this.collapsed = true;
            this.loader.dataUrl = '<?php echo $this->getLoadTreeUrl(false) ?>';
            this.request(this.loader.dataUrl, false);
        }
    },

    expandTree : function()
    {
        this.expandAll();
        if (this.collapsed) {
            this.collapsed = false;
            this.loader.dataUrl = '<?php echo $this->getLoadTreeUrl(true) ?>';
            this.request(this.loader.dataUrl, false);
        }
    },

    categoryClick : function(node, e)
    {
        var baseUrl = '<?php echo $this->getEditUrl() ?>';
        var urlExt = '';
        if (this.storeId) {
            urlExt += 'store/'+this.storeId+'/';
        }
        if (!isNaN(node.id)) { // category is selected
            urlExt += 'category_id/'+node.id+'/';
        }

        this.currentNodeId = node.id;
        this.currentNodePath = this.getPath(node);
        if (node.attributes.menu_id) { // root menu is selected
            this.currentMenuId = node.attributes.menu_id;
            urlExt += 'menu_id/' + this.currentMenuId + '/';
        } else {
            do {
                node = node.parentNode;
                this.rootMenuId = node.attributes.menu_id;
            } while (!node.attributes.menu_id);
            urlExt += 'root_menu_id/' + this.rootMenuId + '/';
        }

        var url = parseSidUrl(baseUrl, urlExt);

        if (!this.useAjax) {
            setLocation(url);
            return;
        }
        if (menu_info_tabsJsTabs.activeTab) {
            var params = {active_tab_id:menu_info_tabsJsTabs.activeTab.id};
        }
        updateContent(url, params);
    },

    getPath: function(node)
    {
        return node.getPath();
    },

    getNodeByPath: function(path)
    {
        path = path.replace(/^\/*/, '').replace(/\/*$/, '');
        path = path.split('/');
        path.shift(); // remove the first root element id - [1]/menu_1/2/3

        var i = 0,
            rootMenuId = path.shift(),
            node = this.getNodeById(rootMenuId);

        while (path[i]) {
            node = node.findChild('id', path[i]);
            i++;
        }

        return node;
    },

    getRootMenuId: function(node)
    {
        var rootMenuId = false;

        if (node.attributes.menu_id) {
            rootMenuId = node.attributes.menu_id;
        } else {
            do {
                node = node.parentNode;
                rootMenuId = node.attributes.menu_id;
            } while (!node.attributes.menu_id);
        }
        return rootMenuId;
    }
});

function reRenderTree(event, switcher)
{
    // re-render tree by store switcher
    if (tree && event) {
        var obj = event.target;
        var newStoreId = obj.value * 1;
        var storeParam = newStoreId ? 'store/'+newStoreId + '/' : '';

        if (obj.switchParams) {
            storeParam += obj.switchParams;
        }
        if (switcher.useConfirm) {
            if (!confirm("<?php echo $this->__('Please confirm site switching. All data that hasn\'t been saved will be lost.') ?>")){
                obj.value = '<?php echo (int) $this->getStoreId() ?>';
                return false;
            }
        }

        if ($('add_root_category_button')) {
            if (newStoreId == 0) {
                $('add_root_category_button').show();
            }
            else {
                $('add_root_category_button').hide();
            }
        }

        // retain current selected category id
        // storeParam = storeParam;// + 'id/' + tree.currentNodeId + '/';
        // var url = tree.switchTreeUrl + storeParam;
        tree.selectCurrentNode();
        // var node = tree.getNodeById(tree.currentNodeId);
        var node = tree.getSelectionModel().getSelectedNode();
        if (node && node.parentNode) {
            if (!isNaN(tree.currentNodeId)) { // category is selected
                storeParam += 'category_id/'+tree.currentNodeId+'/';
            }
            if (node.attributes.menu_id) { // root menu is selected
                storeParam += 'menu_id/' + node.attributes.menu_id + '/';
            } else if (node)  {
                do {
                    node = node.parentNode;
                    tree.rootMenuId = node.attributes.menu_id;
                } while (!node.attributes.menu_id);
                storeParam += 'root_menu_id/' + tree.rootMenuId + '/';
            }
        }
        var url = tree.switchTreeUrl + storeParam;

        // load from cache
        // load from ajax
        new Ajax.Request(url + (url.match(new RegExp('\\?')) ? '&isAjax=true' : '?isAjax=true' ), {
            parameters : {store: newStoreId, form_key: FORM_KEY},
            method     : 'post',
            onComplete : function(transport) {
                var response = eval('(' + transport.responseText + ')');
                if (!response['parameters']) {
                    return false;
                }

                _renderNewTree(response, storeParam);
            }
        });
    }
    // render default tree
    else {
        _renderNewTree();
    }
}

function _renderNewTree(config, storeParam)
{
    if (!config) {
        var config = defaultLoadTreeParams;
    }
    if (tree) {
        tree.purgeListeners();
        tree.el.dom.innerHTML = '';
    }
    tree = new Ext.tree.TreePanel.Enhanced('tree-div', newTreeParams);
    tree.loadTree(config, true);

    // try to select current category
    var selectedNode = null;
    if (config.parameters.path) {
        tree.selectPath(config.parameters.path);
        selectedNode = tree.getSelectionModel().getSelectedNode();
        tree.currentNodePath = config.parameters.path;
    }
    if (selectedNode) {
        tree.currentNodeId = selectedNode.id;
    }
    tree.selectCurrentNode();

    // update content area
    var url = tree.editUrl;
    if (storeParam) {
        url = url + storeParam;
    }
    <?php if ($this->isClearEdit()):?>
        var node = selectedNode;
        if (node && node.parentNode) {
            if (!isNaN(node.id)) { // category is selected
                url += 'category_id/'+node.id+'/';
            }
            if (node.attributes.menu_id) { // root menu is selected
                url += 'menu_id/' + node.attributes.menu_id + '/';
            } else {
                do {
                    node = node.parentNode;
                    this.rootMenuId = node.attributes.menu_id;
                } while (!node.attributes.menu_id);
                url += 'root_menu_id/' + this.rootMenuId + '/';
            }
        }
    <?php endif;?>

    updateContent(url);
}

Ext.onReady(function()
{
    categoryLoader = new Ext.tree.TreeLoader({
       dataUrl: '<?php echo $this->getLoadTreeUrl() ?>'
    });

    categoryLoader.createNode = function(config) {
        var node;
        var _node = Object.clone(config);
        if (config.children && !config.children.length) {
            delete(config.children);
            node = new Ext.tree.AsyncTreeNode(config);
        } else {
            node = new Ext.tree.TreeNode(config);
        }

        return node;
    };

    categoryLoader.buildCategoryTree = function(parent, config)
    {
        if (!config) return null;

        if (parent && config && config.length){
            for (var i = 0; i < config.length; i++) {
                var node;
                var _node = Object.clone(config[i]);
                if (_node.children && !_node.children.length) {
                    delete(_node.children);
                    node = new Ext.tree.AsyncTreeNode(_node);
                } else {
                    node = new Ext.tree.TreeNode(config[i]);
                }
                parent.appendChild(node);
                node.loader = node.getOwnerTree().loader;
                if (_node.children) {
                    this.buildCategoryTree(node, _node.children);
                }
            }
        }
    };

    categoryLoader.buildHash = function(node)
    {
        var hash = {};

        hash = this.toArray(node.attributes);

        if (node.childNodes.length>0 || (node.loaded==false && node.loading==false)) {
            hash['children'] = new Array;

            for (var i = 0, len = node.childNodes.length; i < len; i++) {
                if (!hash['children']) {
                    hash['children'] = new Array;
                }
                hash['children'].push(this.buildHash(node.childNodes[i]));
            }
        }

        return hash;
    };

    categoryLoader.toArray = function(attributes) {
        var data = {form_key: FORM_KEY};
        for (var key in attributes) {
            var value = attributes[key];
            data[key] = value;
        }

        return data;
    };

    categoryLoader.on("beforeload", function(treeLoader, node) {
        treeLoader.baseParams.root_menu_id = tree.getRootMenuId(node);
        treeLoader.baseParams.category_id  = node.attributes.id;
        treeLoader.baseParams.store = node.attributes.store;
        treeLoader.baseParams.form_key = FORM_KEY;
    });

    categoryLoader.on("load", function(treeLoader, node, config) {
        varienWindowOnload();
    });

    if ((typeof varienStoreSwitcher)!='undefined') {
        varienStoreSwitcher.storeSelectorClickCallback = reRenderTree;
    }

    newTreeParams = {
        animate         : false,
        loader          : categoryLoader,
        enableDD        : false,
        containerScroll : true,
        selModel        : new Ext.tree.DefaultSelectionModel(),
        rootVisible     : '<?php echo $this->getRoot()->getIsVisible() ?>',
        useAjax         : <?php echo $this->getUseAjax() ?>,
        switchTreeUrl   : '<?php echo $this->getSwitchTreeUrl() ?>',
        editUrl         : '<?php echo $this->getEditUrl() ?>',
        currentNodeId   : <?php echo (int) $this->getCategoryId() ?>
    };

    defaultLoadTreeParams = {
        parameters : {
            text        : '<?php echo htmlentities($this->getRoot()->getName()) ?>',
            draggable   : false,
            allowDrop   : false,
            id          : <?php echo (int) $this->getRoot()->getId() ?>,
            expanded    : <?php echo (int) $this->getIsWasExpanded() ?>,
            store_id    : <?php echo (int) $this->getStore()->getId() ?>,
            category_id : <?php echo (int) $this->getCategoryId() ?>
        },
        data : <?php echo $this->getTreeJson() ?>
    };

    reRenderTree();
});

function addNew(url, isRoot)
{
    if (isRoot) {
        tree.currentNodeId = tree.root.id;
    }

    if (/store\/\d+/.test(url)) {
        url = url.replace(/store\/\d+/, "store/" + tree.storeId);
    }
    else    {
        url+= "store/" + tree.storeId + "/";
    }

    updateContent(url);
}
//]]>
</script>
<?php endif; ?>
